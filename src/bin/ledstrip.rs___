#![no_std]
#![no_main]
#![feature(core_intrinsics)]
#![feature(abi_avr_interrupt)]
#![feature(const_fn_floating_point_arithmetic)]

mod devices;

use core::cell::RefCell;

use avr_device::interrupt::{self, Mutex};
use atxmega_hal::{clock::{Clock, MHz20}, pac::{SPI0, TCA0, USART0}};
use panic_halt as _;
use embedded_hal::blocking::delay::DelayMs;

pub use devices::prelude::*;
use devices::serial::Serial;

type Delay = atxmega_hal::delay::Delay<MHz20>;



// static USART: Mutex<RefCell<Option<MySerial>>>
//     = Mutex::new(RefCell::new(None));

// struct MySerial(USART0);

// impl ufmt::uWrite for MySerial {
//     type Error = ();

//     fn write_str(&mut self, s: &str) -> Result<(), Self::Error> {
//         for b in s.as_bytes().iter() {
//             while self.0.status.read().dreif().bit_is_clear() {}
//             self.0.txdatal.write(|w| w.data().bits(*b))
//         }
//         Ok(())
//     }
// }

// macro_rules! serial_println {
//     ($($arg:tt)*) => {
//         ::avr_device::interrupt::free(|cs| {
//             if let Some(serial) = &mut *USART.borrow(cs).borrow_mut() {
//                 ::ufmt::uwriteln!(serial, $($arg)*)
//             } else {
//                 Ok(())
//             }
//         }).unwrap()
//     }
// }



// const fn gen_cie(i: f32) -> f32 {
//     let l = i * 100.0;
//     if l <= 8.0 {
//         return l / 903.3;
//     } else {
//         return ((l + 16.0) / 119.0) * ((l + 16.0) / 119.0) * ((l + 16.0) / 119.0)
//     }
// }
// 
// const fn gen_cie_table<const N: usize>() -> [u8; N] {
//     let mut table = [0; N];
//     let mut i = 0;
//     while i < N {
//         table[i] = (gen_cie(i as f32 / 255.0) * 255.0) as u8;
//         i += 1;
//     }
//     table
// }
// 
// const CIE_LUT: [u8; 256] = gen_cie_table();

fn delay_ms(ms: u16) {
    Delay::new().delay_ms(ms)
}

fn hsv_to_rgb(h: u8, s: u8, v: u8) -> (u8, u8, u8) {
    let h: i16 = h as i16;
    let s: i16 = s as i16;
    let v: i16 = v as i16;

    if s == 0 {
        // grey
        (v as u8, v as u8, v as u8)
    } else {
        let i = h / 43;
        let f = h % 43;
        let p = (v * (255 - s)) / 256;
        let q = (v * ((10710 - (s * f)) / 42)) / 256;
        let t = (v * ((10710 - (s * (42 - f))) / 42)) / 256;

        match i {
            0 => (v as u8, t as u8, p as u8),
            1 => (q as u8, v as u8, p as u8),
            2 => (p as u8, v as u8, t as u8),
            3 => (p as u8, q as u8, v as u8),
            4 => (t as u8, p as u8, v as u8),
            _ => (v as u8, p as u8, q as u8),
        }
    }
}

#[atxmega_hal::entry]
fn main() -> ! {
    let dp = atxmega_hal::Peripherals::take().unwrap();
    
    // Unlock protected IO registers in configuration change protection
    //dp.CPU.ccp.write(|w| { unsafe { w.bits(0xD8) } });
    //dp.CLKCTRL.mclkctrlb.modify(|_, w| { w.pen().clear_bit() });

    let clkctrl = dp.CLKCTRL.constrain();

    let _clocks = clkctrl
        .clk_src_main(MainClkSrc::Osc20M)
        .main_osc_freq(20.MHz())
        .per_clk(20.MHz())
        .freeze();

    // Configure Pins
    let pins = atxmega_hal::pins!(dp);

    // PA7 is LUT1 Output
    let _ = pins.pa7.into_output();

    // Following pins are for scope debugging
    // PB2 is WO2
    let _ = pins.pb2.into_output();

    // PORTMUX, change SPI0 to PC, change USART to PORTA
    // SCK: PC0
    // MOSI: PC2
    // TX: PA1
    // RX: PA2
    dp.PORTMUX.ctrlb.modify(|_, w| { w
        .spi0().set_bit()
        .usart0().set_bit()
    });
    let _ = pins.pc0.into_output();
    let _ = pins.pc2.into_output();
    let pa1 = pins.pa1.into_output();
    let pa2 = pins.pa2.into_floating_input();

    let mut led = pins.pb6.into_output().downgrade();
    let mut led2 = pins.pb5.into_output().downgrade();
    led.set_low();
    led2.set_high();

   
    
    //let mut pins = (pa1, pa2);
    //let mut s = Serial::new(dp.USART0, pins, 115200.Bd(), clocks);


    
    // // UART setup
    // dp.USART0.ctrla.write(|w| { w
    //     .rxcie().set_bit()
    // });
    // dp.USART0.ctrlc.write(|w| { w
    //     .cmode().asynchronous()
    //     .pmode().disabled()
    //     .sbmode()._1bit()
    //     .chsize()._8bit()
    // });
    // // // 2500, normal speed @ 20MHz -> 32KBit/s
    // // dp.USART0.baud.write(|w| { unsafe { w.bits(2500) } });
    // // 694, normal speed @ 20MHz -> ~115200Bit/s
    // dp.USART0.baud.write(|w| { unsafe { w.bits(694) } });
    // dp.USART0.ctrlb.write(|w| { w
    //     .rxen().set_bit()
    //     .txen().set_bit()
    //     .rxmode().normal()
    //     .mpcm().clear_bit()
    // });

    // // Initialize global USART variable
    // interrupt::free(|cs| {
    //     let mut u = USART.borrow(cs).borrow_mut();
    //     *u = Some(MySerial(dp.USART0));
    // });

    // serial_println!("Hi!");

    // // for i in CIE_LUT {
    // //     serial_println!("{}", i);
    // // }


    // Configure SPI0
    // NOTE: make sure to disable slave select first, then switch to master mode
    // Otherwise the master bit might get cleared again due to a floating SS pin
    dp.SPI0.ctrlb.modify(|_, w| { w
        .bufen().clear_bit()    // Disable buffer mode
        .bufwr().clear_bit()    // Disable buffer write mode
        .mode()._0()            // SPI Mode 0
        .ssd().set_bit()        // Disable slave select
    });
    dp.SPI0.ctrla.modify(|_, w| { w
        .clk2x().set_bit()      // Enable double speed
        .dord().clear_bit()     // Transmit MSB first
        .enable().set_bit()     // Enable peripheral
        .master().set_bit()     // SPI Master
        .presc().div64()        // Clock prescaler 16
    });
    dp.SPI0.intctrl.reset();


    // Configure TCA0
    // no support in atdf2svd for different modes,
    // so we write into these registers manually

    // CMP2 = 0x04
    // FIXME: writing 16 bits causes the wrong order of low and high addresses
    // to be written? This breaks things
    //dp.TCA0.cmp2().write(|w| { unsafe { w.bits(0x0004) } });
    dp.TCA0.lcmp2().write(|w| { unsafe { w.bits(0x04) } });
    dp.TCA0.hcmp2().write(|w| { unsafe { w.bits(0x00) } });

    // CMP2EN, WGMODE = SINGLESLOPE
    dp.TCA0.ctrlb.write(|w| { unsafe { w.bits(0b01000011) } });

    // CMP2OV = 1
    dp.TCA0.ctrlc.write(|w| { unsafe { w.bits(0b00000100) } });

    // Period = 0x07
    // FIXME: writing 16 bits causes the wrong order of low and high addresses
    // to be written? This breaks things
    //dp.TCA0.per().write(|w| { unsafe { w.bits(0x0007) } });
    dp.TCA0.lper().write(|w| { unsafe { w.bits(0x07) } });
    dp.TCA0.hper().write(|w| { unsafe { w.bits(0x00) } });


    // Configure LUT1 for LED output
    dp.CCL.truth1.write(|w| unsafe { w.bits(168) } );
    dp.CCL.lut1ctrlc.modify(|_, w| { w
        .insel2().tca0()        // TCA0 WO2 input source
    });
    dp.CCL.lut1ctrlb.modify(|_, w| { w
        .insel0().spi0()        // SPI0 SCK input source
        .insel1().spi0()        // SPI0 MOSI input source
    });
    dp.CCL.lut1ctrla.modify(|_, w| { w
        .clksrc().clear_bit()   // Clock Source Selection: disabled
        .edgedet().dis()        // Edge detector disabled
        .filtsel().disable()    // Filter disabled
        .enable().set_bit()     // LUT enabled
        .outen().set_bit()      // Output enabled
    });
    dp.CCL.ctrla.modify(|_, w| { w
        .enable().set_bit()     // Enable peripheral
        .runstdby().set_bit()   // Run in standby: enabled
    });



    // Init TWI
    const TWI_BAUD: u8 = (MHz20::FREQ / (2 * 100000) - 5) as u8;
    dp.TWI0.mctrla.modify(|_, w| w.enable().clear_bit());
    dp.TWI0.mbaud.write(|w| unsafe { w.bits(TWI_BAUD) });
    dp.TWI0.mctrla.modify(|_, w| w.enable().set_bit());
    dp.TWI0.mstatus.modify(|_, w| w.busstate().idle());

    // Send START, address, ~W bit
    dp.TWI0.maddr.write(|w| { unsafe { w.bits(0x03 << 1) } });

    // Wait for an ACK
    while dp.TWI0.mstatus.read().wif().bit_is_clear() {}
    while dp.TWI0.mstatus.read().rxack().bit_is_set() {}
    
    // Transmit an A
    dp.TWI0.mdata.write(|w| unsafe { w.bits(0x41) });

    // Wait for an ACK
    while dp.TWI0.mstatus.read().wif().bit_is_clear() {}
    while dp.TWI0.mstatus.read().rxack().bit_is_set() {}

    // Send STOP
    dp.TWI0.mctrlb.modify(|_, w| w.mcmd().stop());


    // Enable interrupts
    unsafe { avr_device::interrupt::enable() };

    let mut j: u8 = 0;

    loop {
        //led.toggle();
        //delay_ms(100);
        //led.toggle();
        //delay_ms(100);
        //led.toggle();
        //delay_ms(100);
        //led.toggle();
        //delay_ms(800);


        let (r, g, b) = hsv_to_rgb(j, 255, 32);
        for _i in 0..100 {
            //let (r, g, b) = hsv_to_rgb(j.wrapping_add(i), 255, 255);
            send_data(&dp.SPI0, &dp.TCA0, r);
            send_data(&dp.SPI0, &dp.TCA0, g);
            send_data(&dp.SPI0, &dp.TCA0, b);
            send_data(&dp.SPI0, &dp.TCA0, 0x00);
        }

        j = j.wrapping_add(1);
        delay_ms(10);
    }
}

fn send_data(spi: &SPI0, tca: &TCA0, d: u8) {
    // // Clear WRCOL
    // //spi.intflags.modify(|r, w| { unsafe { w.bits(r.bits()) } });
    // let _ = spi.intflags.read().wrcol().bit();
    // let _ = spi.data.read().bits();

    // Clear counter
    //tca.cnt().write(|w| { unsafe { w.bits(0) } });
    tca.lcnt().write(|w| { unsafe { w.bits(0x00) } });
    tca.hcnt().write(|w| { unsafe { w.bits(0x00) } });

    // Start counter
    tca.ctrla.write(|w| { w.
        clksel().div2().
        enable().set_bit()
    });

    // Write data
    spi.data.write(|w| { unsafe { w.bits(d) } });

    // Wait for transfer complete
    while spi.intflags.read().rxcif().bit_is_clear() {}
    let _ = spi.data.read().bits();

    // Stop timer
    tca.ctrla.modify(|_, w| { w.enable().clear_bit() });
}

#[avr_device::interrupt(attiny817)]
fn USART0_RXC() {
    interrupt::free(|_cs| {
        //let mut u = USART.borrow(cs).borrow_mut();
        //let uart = u.as_mut().unwrap();
        //let received = uart.0.rxdatal.read().data().bits();
        //uart.0.txdatal.write(|w| { w.data().bits(received) });
    });
}
